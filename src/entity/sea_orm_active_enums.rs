//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "attribute")]
pub enum Attribute {
    #[sea_orm(string_value = "white")]
    #[serde(rename = "white")]
    White,
    #[sea_orm(string_value = "black")]
    #[serde(rename = "black")]
    Black,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "sharing")]
pub enum Sharing {
    #[sea_orm(string_value = "TLP:Red")]
    #[serde(rename = "TLP:Red")]
    TlpRed,
    #[sea_orm(string_value = "TLP:Amber+Strict")]
    #[serde(rename = "TLP:Amber+Strict")]
    TlpAmberStrict,
    #[sea_orm(string_value = "TLP:Amber")]
    #[serde(rename = "TLP:Amber")]
    TlpAmber,
    #[sea_orm(string_value = "TLP:Green")]
    #[serde(rename = "TLP:Green")]
    TlpGreen,
    #[sea_orm(string_value = "TLP:Clear")]
    #[serde(rename = "TLP:Clear")]
    TlpClear,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "source")]
pub enum Source {
    #[sea_orm(string_value = "official")]
    #[serde(rename = "official")]
    Official,
    #[sea_orm(string_value = "local")]
    #[serde(rename = "local")]
    Local,
}
