//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "yara_file")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub last_modified_time: DateTimeWithTimeZone,
    pub version: Option<i32>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub compiled_data: Option<Vec<u8>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub category: Option<String>,
    pub imports: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::yara_rule_history::Entity")]
    YaraRuleHistory,
    #[sea_orm(has_many = "super::yara_rules::Entity")]
    YaraRules,
}

impl Related<super::yara_rule_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::YaraRuleHistory.def()
    }
}

impl Related<super::yara_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::YaraRules.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
