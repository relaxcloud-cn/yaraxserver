//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use super::sea_orm_active_enums::Attribute;
use super::sea_orm_active_enums::Sharing;
use super::sea_orm_active_enums::Source;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "yara_rule_history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub history_id: i32,
    pub rule_id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub private: Option<bool>,
    pub global: Option<bool>,
    #[sea_orm(column_type = "Text", nullable)]
    pub auth: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub tag: Option<Vec<String>>,
    pub strings: Option<Vec<String>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub condition: Option<String>,
    pub last_modified_time: DateTimeWithTimeZone,
    pub loading_time: Option<DateTimeWithTimeZone>,
    pub belonging: i32,
    pub verification: Option<bool>,
    pub source: Option<Source>,
    pub version: Option<i32>,
    pub sharing: Option<Sharing>,
    pub grayscale: Option<bool>,
    pub attribute: Option<Attribute>,
    pub changed_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub changed_by: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::yara_file::Entity",
        from = "Column::Belonging",
        to = "super::yara_file::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    YaraFile,
    #[sea_orm(
        belongs_to = "super::yara_rules::Entity",
        from = "Column::RuleId",
        to = "super::yara_rules::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    YaraRules,
}

impl Related<super::yara_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::YaraFile.def()
    }
}

impl Related<super::yara_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::YaraRules.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
